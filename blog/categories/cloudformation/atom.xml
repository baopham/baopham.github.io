<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CloudFormation | :baopham]]></title>
  <link href="http://baopham.github.io/blog/categories/cloudformation/atom.xml" rel="self"/>
  <link href="http://baopham.github.io/"/>
  <updated>2016-02-12T00:50:57-08:00</updated>
  <id>http://baopham.github.io/</id>
  <author>
    <name><![CDATA[Bao Pham]]></name>
    <email><![CDATA[gbaopham@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AWS CloudFormation reusable variables]]></title>
    <link href="http://baopham.github.io/blog/2016/02/12/aws-cloudformation-reusable-variables/"/>
    <updated>2016-02-12T07:46:33-08:00</updated>
    <id>http://baopham.github.io/blog/2016/02/12/aws-cloudformation-reusable-variables</id>
    <content type="html"><![CDATA[<p>Here is a way to create reusable strings / numbers / etc. in CloudFormation.</p>

<p>1 &ndash; Create Lambda resource to build the values you need.</p>

<p>2 &ndash; Create a custom resource to store the value returned from the Lambda</p>

<p>Example: Here we have a custom resource <code>AppInfo</code> to hold the App information.</p>

<p>```javascript
&ldquo;Resources&rdquo;: {
  &ldquo;AppInfo&rdquo;: {</p>

<pre><code>"Type": "Custom::AppInfo",
"Properties": {
  "ServiceToken": { "Fn::GetAtt": ["GetAppInfo", "Arn"] },
  "BuildVersion": { "Ref": "BuildVersion" }
}
</code></pre>

<p>  },
  &ldquo;GetAppInfo&rdquo;: {</p>

<pre><code>"Type": "AWS::Lambda::Function",
"Properties": {
  "Handler": "index.handler",
  "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
  "Code": {
    "ZipFile":  { "Fn::Join": ["", [
      "var response = require('cfn-response');",
      "exports.handler = function(event, context) {",
      "   var username = '",
      {
          "Fn::Join": [ "_", [ {"Ref": "AppName"}, {"Ref": "AppEnv"} ] ]
      },
      "';",
      "   var email = '",
      {
          "Fn::Join": [ "", [ {"Ref": "AppName"}, "+", {"Ref": "AppEnv"}, "@gmail.com" ] ]
      },
      "';",
      "   var responseData = { Username: username, Email: email };",
      "   response.send(event, context, response.SUCCESS, responseData);",
      "};"
      ]]
    }
  },
  "Runtime": "nodejs"
}
</code></pre>

<p>  },
  &ldquo;LambdaExecutionRole&rdquo;: {</p>

<pre><code>"Type": "AWS::IAM::Role",
"Properties": {
  "AssumeRolePolicyDocument": {
    "Version": "2012-10-17",
    "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
  },
  "Path": "/",
  "Policies": [{
    "PolicyName": "root",
    "PolicyDocument": {
      "Version": "2012-10-17",
      "Statement": [{ "Effect": "Allow", "Action": ["logs:*"], "Resource": "arn:aws:logs:*:*:*" }]
    }
  }]
}
</code></pre>

<p>  }
}
<code>``
3 - Reference the custom resource with</code>Fn::GetAtt`:</p>

<p><code>javascript
{ "Fn::GetAtt": [ "AppInfo", "Username" ] },
{ "Fn::GetAtt": [ "AppInfo", "Email" ] }
...
</code>
4 &ndash; Create a parameter <code>BuildVersion</code>. This is the key to make sure the custom resource <code>AppInfo</code> is updated when you update your parameters <code>AppName</code> or <code>AppEnv</code>. Without it, when you update these 2 parameters, CloudFormation will only update Lambda function and leave the resource <code>AppInfo</code> the same without sending another request to <code>GetAppInfo</code> for the latest value.</p>

<p>```
&ldquo;Parameters&rdquo;: {
  &ldquo;BuildVersion&rdquo;: {</p>

<pre><code>"Description": "Build Version. Needs to be different everytime you make an update",
"Type": "String",
"MinLength": 1
</code></pre>

<p>  }
}
```</p>
]]></content>
  </entry>
  
</feed>
