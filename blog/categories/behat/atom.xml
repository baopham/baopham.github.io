<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Behat | :baopham]]></title>
  <link href="http://baopham.github.io/blog/categories/behat/atom.xml" rel="self"/>
  <link href="http://baopham.github.io/"/>
  <updated>2017-04-16T00:24:24+08:00</updated>
  <id>http://baopham.github.io/</id>
  <author>
    <name><![CDATA[Bao Pham]]></name>
    <email><![CDATA[gbaopham@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Modelling with Behat and Laravel Examples]]></title>
    <link href="http://baopham.github.io/blog/2016/05/17/modelling-with-behat-examples/"/>
    <updated>2016-05-17T15:52:27+08:00</updated>
    <id>http://baopham.github.io/blog/2016/05/17/modelling-with-behat-examples</id>
    <content type="html"><![CDATA[<p>Follow up from my previous <a href="http://baopham.github.io/blog/2016/04/03/modelling-with-behat-and-laravel/">post</a>, here is an example feature (similar to the feature from the <a href="http://stakeholderwhisperer.com/posts/2014/10/introducing-modelling-by-example">original post</a>)</p>

<h3>behat.yml</h3>

<p>```
default:</p>

<pre><code>suites:
  product_payment_domain:
    contexts: [ ProductPaymentDomainContext ]
    filters:  { tags: '@product_payment' }
  product_payment_ui:
    contexts: [ ProductPaymentUIContext ]
    filters:  { tags: '@product_payment&amp;&amp;@critical' }
gherkin:
  filters:
    tags: ~@wip
extensions:
    Laracasts\Behat:
        #env_path: .env.behat
    Behat\MinkExtension:
        base_url: https://e-commerce.dev
        default_session: laravel
        laravel: ~
        selenium2:
          wd_host: "http://selenium-server.dev:4444/wd/hub"
        browser_name: chrome
</code></pre>

<p>```</p>

<h3>Feature and Scenarios</h3>

<blockquote><p>How To Write Scenarios</p>

<p>Focus on describing the problem you&rsquo;re trying to solve, rather than focusing on the &ldquo;how&rdquo; and the &ldquo;look&rdquo;. For example, don&rsquo;t mention anything about &ldquo;I click button x&rdquo; or &ldquo;I go page /path/to/page&rdquo; or &ldquo;I should see ABC on sidebar&rdquo; or &ldquo;I wait&rdquo; in your scenarios.</p>

<p>Read more here: <a href="http://stakeholderwhisperer.com/posts/2014/10/introducing-modelling-by-example">Introducing Modelling by Example</a></p></blockquote>

<p>```
Feature: Product payment
  In order to receive products
  As a customer
  I need to be able to pay for the products that I have selected</p>

<p>  Scenario: Buying a product that is out of stock</p>

<pre><code>Given I have put the product "Windows ME" in my basket a few days before
And product "Window ME" is now out of stock
Then I should not be able to checkout because "Window ME" is out of stock
</code></pre>

<p>  Scenario: Cannot buy if product is restricted in the account&rsquo;s country</p>

<pre><code>Given I am located in a country that does not allow product "FooBar"
Then I cannot purchase this product
</code></pre>

<p>```</p>

<p>How I would implement the steps in the Domain Context class:</p>

<p>```php</p>

<pre><code>/**
 * @Given I have put the product :product in my basket a few days before
 */
public function iHavePutTheProductInMyBasket($product)
{
    $this-&gt;product = factory(Product::class)-&gt;create(['name' =&gt; $product]);

    $this-&gt;basket-&gt;put($this-&gt;product);
}

/**
 * @Given product :product is now out of stock
 */
public function ProductIsOutOfStock($product)
{
    $this-&gt;product-&gt;count = 0;

    $this-&gt;product-&gt;save();
}

/**
 * @Then I should not be able to checkout because :product is out of stock
 */
public function iShouldNotBeAbleToCheckoutBecauseProductIsOutOfStock($product)
{
    $this-&gt;assertException(function () {
        $this-&gt;basket-&gt;checkout();
    }, ProductIsOutOfStock::class);
}

/**
 * @Given I am located in a country that does not allow product :product
 */
public function iAmLocatedInACountryThatDoesNotAllowProduct($product)
{
    $this-&gt;currentUser = factory(User::class)-&gt;create();

    $this-&gt;product = factory(Product::class)-&gt;create(['name' =&gt; $product]);

    $this-&gt;currentUser-&gt;country-&gt;restricted_products()-&gt;sync([$this-&gt;product-&gt;id]);
}

/**
 * @Then I cannot purchase this product
 */
public function iCannotPurchaseThisProduct()
{
    $this-&gt;currentUser-&gt;cannot('purchase', $this-&gt;product);
}
</code></pre>

<p>```</p>

<p>where the method <code>assertException</code> is a custom method:</p>

<p>```php</p>

<pre><code>/**
 * @param Closure $closure
 * @param string $exception
 */
protected function assertException(\Closure $closure, $exception)
{
    $fail = false;

    try {
        $closure();

        $fail = true;
    } catch (\Exception $e) {
        if (!($e instanceof $exception)) {
            $fail = true;
        }
    }

    if ($fail) {
        $this-&gt;fail("Expected $exception to be thrown");
    }
}
</code></pre>

<p>```</p>

<p>and if you follow my <a href="http://baopham.github.io/blog/2016/04/04/modelling-with-behat-and-laravel/">previous post</a>, the <code>assertEquals</code> is forwarded to the <code>PHPUnit_Framework_Assert</code> class.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modelling with Behat and Laravel]]></title>
    <link href="http://baopham.github.io/blog/2016/04/04/modelling-with-behat-and-laravel/"/>
    <updated>2016-04-04T14:17:34+08:00</updated>
    <id>http://baopham.github.io/blog/2016/04/04/modelling-with-behat-and-laravel</id>
    <content type="html"><![CDATA[<p>Here is an interesting read talking about how to &ldquo;do a Domain-Driven Design while doing Behaviour-Driven Development&rsquo;s red-green-refactor cycle&rdquo;: <a href="http://stakeholderwhisperer.com/posts/2014/10/introducing-modelling-by-example">Introducing Modelling by Example</a></p>

<p>If you like the author&rsquo;s idea and want to apply this to your Laravel projects, here is something you can do to get most (if not all) Laravel PHPUnit helper methods in your Behat Domain Context class:</p>

<ul>
<li>Install <a href="https://github.com/laracasts/Behat-Laravel-Extension">Behat-Laravel-Extension</a></li>
<li>Have a base Context class. I call it <code>DomainContext</code> but you could do something similar for the default <code>FeatureContext</code>. Having a separate abstract parent class lets me divide my context classes into 2 categories: UI and Domain.</li>
</ul>


<p>```php
&lt;?php</p>

<p>use App\User;
use Behat\Behat\Context\SnippetAcceptingContext;
use Behat\MinkExtension\Context\MinkContext;
use Illuminate\Foundation\Testing\ApplicationTrait;
use Illuminate\Foundation\Testing\CrawlerTrait;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;
use Laracasts\Behat\Context\KernelAwareContext;
use PHPUnit_Framework_Assert as PHPUnit;
use Symfony\Component\HttpKernel\HttpKernelInterface;</p>

<p>abstract class DomainContext extends MinkContext implements KernelAwareContext, SnippetAcceptingContext
{</p>

<pre><code>use ApplicationTrait;
use CrawlerTrait;

protected $baseUrl = 'http://localhost';

/**
 * @var User
 */
protected $currentUser;

public function setApp(HttpKernelInterface $app)
{
    $this-&gt;app = $app;
}

public function be(User $user)
{
    Session::start();

    Auth::loginUsingId($user-&gt;id);

    $this-&gt;currentUser = $user;
}

public function __call($name, array $arguments)
{
    forward_static_call_array([PHPUnit::class, $name], $arguments);
}
</code></pre>

<p>}
```
* Extend this base class for all your Domain Context classes then you will have access to methods such as:</p>

<p>```php
$this->be($user);</p>

<p>$this->get(&lsquo;users&rsquo;);</p>

<p>$this->post(&lsquo;users&rsquo;, [&lsquo;_token&rsquo; =>  csrf_token(), &lsquo;email&rsquo; => &lsquo;<a href="&#109;&#x61;&#x69;&#x6c;&#116;&#111;&#58;&#102;&#111;&#x6f;&#x40;&#x62;&#x61;&#114;&#46;&#x63;&#111;&#x6d;">&#102;&#111;&#111;&#64;&#98;&#x61;&#x72;&#46;&#x63;&#x6f;&#109;</a>&rsquo;]);</p>

<p>$this->expectsJobs(SendInvitationEmail::class);</p>

<p>$this->seeInDatabase(&lsquo;users&rsquo;, [&lsquo;email&rsquo; => &lsquo;<a href="&#109;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#x66;&#111;&#111;&#x40;&#x62;&#x61;&#114;&#46;&#x63;&#111;&#x6d;">&#102;&#x6f;&#x6f;&#64;&#98;&#97;&#114;&#x2e;&#x63;&#111;&#109;</a>&rsquo;]);
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Behat, Selenium and VirtualBox]]></title>
    <link href="http://baopham.github.io/blog/2016/04/04/behat-selenium-and-virtualbox/"/>
    <updated>2016-04-04T13:57:47+08:00</updated>
    <id>http://baopham.github.io/blog/2016/04/04/behat-selenium-and-virtualbox</id>
    <content type="html"><![CDATA[<p>If you want to run selenium server on the host machine and behat in VirtualBox, this setup could work for you:</p>

<p>```yml behat.yml
default:</p>

<pre><code>extensions:
    Behat\MinkExtension:
        base_url: https://foobar.dev
        selenium2:
            wd_host: "http://selenium-server.dev:4444/wd/hub"
        browser_name: chrome
</code></pre>

<p>```</p>

<p>In your virtualbox, edit the <code>/etc/hosts</code> and add a line:</p>

<p><code>text /etc/hosts
10.0.2.2 selenium-server.dev
</code></p>

<p>Then run your selenium server on your host machine.</p>
]]></content>
  </entry>
  
</feed>
