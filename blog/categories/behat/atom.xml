<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Behat | :baopham]]></title>
  <link href="http://baopham.github.io/blog/categories/behat/atom.xml" rel="self"/>
  <link href="http://baopham.github.io/"/>
  <updated>2016-04-04T02:20:11-07:00</updated>
  <id>http://baopham.github.io/</id>
  <author>
    <name><![CDATA[Bao Pham]]></name>
    <email><![CDATA[gbaopham@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Modelling with Behat and Laravel]]></title>
    <link href="http://baopham.github.io/blog/2016/04/03/modelling-with-behat-and-laravel/"/>
    <updated>2016-04-03T23:17:34-07:00</updated>
    <id>http://baopham.github.io/blog/2016/04/03/modelling-with-behat-and-laravel</id>
    <content type="html"><![CDATA[<p>Here is an interesting read talking about how to &ldquo;do a Domain-Driven Design while doing Behaviour-Driven Development&rsquo;s red-green-refactor cycle&rdquo;: <a href="http://stakeholderwhisperer.com/posts/2014/10/introducing-modelling-by-example">Introducing Modelling by Example</a></p>

<p>If you like the author&rsquo;s idea and want to apply this to your Laravel projects, here is something you can do to get most (if not all) Laravel PHPUnit helper methods in your Behat Domain Context class:</p>

<ul>
<li>Install <a href="https://github.com/laracasts/Behat-Laravel-Extension">Behat-Laravel-Extension</a></li>
<li>Have a base Context class. I call it <code>DomainContext</code> but you could do something similar for the default <code>FeatureContext</code>. Having a separate abstract parent class lets me divide my context classes into 2 categories: UI and Domain.</li>
</ul>


<p>```php
&lt;?php</p>

<p>use App\User;
use Behat\Behat\Context\SnippetAcceptingContext;
use Behat\MinkExtension\Context\MinkContext;
use Illuminate\Foundation\Testing\ApplicationTrait;
use Illuminate\Foundation\Testing\CrawlerTrait;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;
use Laracasts\Behat\Context\KernelAwareContext;
use PHPUnit_Framework_Assert as PHPUnit;
use Symfony\Component\HttpKernel\HttpKernelInterface;</p>

<p>abstract class DomainContext extends MinkContext implements KernelAwareContext, SnippetAcceptingContext
{</p>

<pre><code>use ApplicationTrait;
use CrawlerTrait;

protected $baseUrl = 'http://localhost';

/**
 * @var User
 */
protected $currentUser;

public function setApp(HttpKernelInterface $app)
{
    $this-&gt;app = $app;
}

public function be(User $user)
{
    Session::start();

    Auth::loginUsingId($user-&gt;id);

    $this-&gt;currentUser = $user;
}

public function __call($name, array $arguments)
{
    forward_static_call_array([PHPUnit::class, $name], $arguments);
}
</code></pre>

<p>}
```
* Extend this base class for all your Domain Context classes then you will have access to methods such as:</p>

<p>```php
$this->be($user);</p>

<p>$this->get(&lsquo;users&rsquo;);</p>

<p>$this->post(&lsquo;users&rsquo;, [&lsquo;_token&rsquo; =>  csrf_token(), &lsquo;email&rsquo; => &lsquo;<a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#x66;&#111;&#x6f;&#64;&#98;&#97;&#114;&#46;&#99;&#111;&#109;">&#102;&#111;&#x6f;&#x40;&#98;&#x61;&#114;&#x2e;&#x63;&#111;&#x6d;</a>&rsquo;]);</p>

<p>$this->expectsJobs(SendInvitationEmail::class);</p>

<p>$this->seeInDatabase(&lsquo;users&rsquo;, [&lsquo;email&rsquo; => &lsquo;<a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#102;&#x6f;&#111;&#64;&#98;&#97;&#x72;&#46;&#x63;&#x6f;&#x6d;">&#x66;&#x6f;&#x6f;&#x40;&#98;&#97;&#x72;&#x2e;&#99;&#111;&#109;</a>&rsquo;]);
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Behat, Selenium and VirtualBox]]></title>
    <link href="http://baopham.github.io/blog/2016/04/03/behat-selenium-and-virtualbox/"/>
    <updated>2016-04-03T22:57:47-07:00</updated>
    <id>http://baopham.github.io/blog/2016/04/03/behat-selenium-and-virtualbox</id>
    <content type="html"><![CDATA[<p>If you want to run selenium server on the host machine and behat in VirtualBox, this setup could work for you:</p>

<p>```yml behat.yml
default:</p>

<pre><code>extensions:
    Behat\MinkExtension:
        base_url: https://foobar.dev
        selenium2:
            wd_host: "http://selenium-server.dev:4444/wd/hub"
        browser_name: chrome
</code></pre>

<p>```</p>

<p>In your virtualbox, edit the <code>/etc/hosts</code> and add a line:</p>

<p><code>text /etc/hosts
10.0.2.2 selenium-server.dev
</code></p>

<p>Then run your selenium server on your host machine.</p>
]]></content>
  </entry>
  
</feed>
